<Modal @ref="modal">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>系统设置</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <form>
                <input type="hidden" @bind-value="@SysConfig.ConfigId" />
                <div class="form-group">
                    <label>存储地址</label>
                    <input class="form-control" @bind-value="@SysConfig.Addr" />
                </div>
                <div class="form-group">
                    <label>QBitTorrent Api</label>
                    <input class="form-control" @bind-value="@SysConfig.QBitApi" />
                </div>
                <div class="form-group">
                    <label>用户名</label>
                    <input class="form-control" @bind-value="@SysConfig.QBitUser" />
                </div>
                <div class="form-group">
                    <label>密码</label>
                    <input class="form-control" @bind-value="@SysConfig.QBitPassword" />
                </div>
            </form>
        </ModalBody>
        <ModalFooter Class="justify-content-center">
            <Button Class="btn btn-primary" Clicked="@Save">
                保存
            </Button>
            <Button Class="btn btn-secondary" Clicked="@HideModal">
                关闭
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal modal;

    private SysConfig SysConfig { get; set; }

    public bool SysInited => SysConfig?.ConfigId > 0;

    protected override void OnInitialized()
    {
        SysConfig = BlazorApp.Config ?? new SysConfig();
    }

    protected async Task Save()
    {
        var client = BlazorApp.Database;
        if (SysConfig.ConfigId > 0)
        {
            client.Updateable(SysConfig).ExecuteCommand();
        }
        else
        {
            client.Insertable(SysConfig).ExecuteCommandIdentityIntoEntity();
        }

        BlazorApp.Config = SysConfig;
        await HideModal();
        await OnSave.InvokeAsync();
    }

    public Task ShowModal()
    {
        return modal.Show();
    }

    public Task HideModal()
    {
        return modal.Hide();
    }

    [Parameter]
    public EventCallback OnSave { get; set; }
}
