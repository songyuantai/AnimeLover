
<Modal @ref="modal">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@title</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="form">
                <input type="hidden" @bind-value="@Id" />
                <div class="form-group">
                    <label>名称</label>
                    <input class="form-control" @bind-value="@Name" />
                </div>
                <div class="form-group">
                    <label>关键字</label>
                    <input class="form-control" @bind-value="@Keyword" />
                </div>
                <div class="form-group">
                    <label>季度</label>
                    <input class="form-control" @bind-value="@Season" />
                </div>
                <div class="form-group">
                    <label>物理路径</label>
                    <input class="form-control" @bind-value="@PhysicalPath" />
                </div>
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Class="btn btn-primary" Clicked="@Save">
                保存
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>
@code {
    /// <summary>
    /// id
    /// </summary>
    [Parameter]
    public int Id { get; set; }

    /// <summary>
    /// 番剧名称
    /// </summary>
    [Parameter]
    public string Name { get; set; }

    /// <summary>
    /// 关键字
    /// </summary>
    [Parameter]
    public string Keyword { get; set; }

    /// <summary>
    /// 季度
    /// </summary>
    [Parameter]
    public string Season { get; set; }

    /// <summary>
    /// 物理地址
    /// </summary>
    [Parameter]
    public string PhysicalPath { get; set; }

    private string title => Id > 0 ? "编辑番剧" : "新增番剧";

    public delegate void AnimeUpdateHandler(Anime anime);

    public event AnimeUpdateHandler AnimeUpdated;

    private Modal modal;

    public Task ShowModal()
    {
        return modal.Show();
    }

    public Task HideModal()
    {
        return modal.Hide();
    }

    [Inject] IMessageService MessageService { get; set; }

    /// <summary>
    /// 保存番剧信息
    /// </summary>
    /// <returns></returns>
    private async Task Save()
    {
        if(Id > 0)
        {
            var data = BlazorApp.Database.Queryable<Anime>().First(m => m.Id == Id);
            data.Name = Name;
            data.Keyword = Keyword;
            data.Season = Season;
            var oldPath = data.PhysicalPath;
            data.PhysicalPath = PhysicalPath;

            var success = BlazorApp.Database.Updateable(data).ExecuteCommand() > 0;
            if (success)
            {
                await MessageService.Success("保存成功！");
                await HideModal();

                AnimeUpdated(data);
            }
            else
            {
                await MessageService.Error("保存失败，请检查！");
            }
        }
        else
        {
            var model = new Anime
            {
                Name = Name,
                Keyword = Keyword,
                Season = Season,
                PhysicalPath = PhysicalPath,
                CreatedDate = DateTime.Now,
                SearchEngine = SearchEngine.ComitCat,
            };

            if (!Directory.Exists(PhysicalPath))
            {
                Directory.CreateDirectory(PhysicalPath);
            }

            var success = BlazorApp.Database.Insertable(model).ExecuteCommandIdentityIntoEntity();
            if (success)
            {
                await MessageService.Success("新增成功！");
                await HideModal();

                AnimeUpdated(model);
            }
            else
            {
                await MessageService.Error("新增失败，请检查！");
            }
        }

        
    }
}
