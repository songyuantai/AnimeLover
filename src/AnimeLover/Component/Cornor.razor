@using AnimeLover.Event
@inject IJSRuntime jsRuntime
<div class="cornor">
    <button class="btn btn-outline-success rounded-circle" @onclick="ShowModal">
        <span class="fa fa-plus"></span>
    </button>
    <button class="btn btn-outline-success rounded-circle" hidden="@HiddenToTop" @onclick="ScrollTop">
        <span class="fa fa-arrow-circle-up"></span>
    </button>
</div>
<Modal @ref="modalRef">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader Class="justify-content-between border">
            <ModalTitle>
                订阅新番
            </ModalTitle>
            <div>
                <Button Class="btn btn-success mr-2" @onclick="@CreateAnimeManual">
                    <i class="fa fa-plus"></i>
                    新增</Button>
                <Button Class="btn btn-primary mr-2 ml-2" @onclick="@GetSeasonAnimies">
                    <i class="fa fa-refresh"></i>
                    更新</Button>
            </div>
        </ModalHeader>
        <ModalBody>
            <div class="row">
                @foreach(var animie in SeasonAnimes)
                {
                    <div class="col-lg-4 col-sm-12 p-1">
                        <div class="card">
                            <div class="card-body">
                                <p class="card-title text-primary" title="@animie.Name">
                                    @(Util.GetSimpleName(animie.Name))
                                </p>
                                <div class="d-flex justify-content-between align-items-baseline">

                                    @if (animie.Subscribed)
                                    {
                                        <button class="btn btn-outline-primary" @onclick="@(e => UnSubAnime(animie))">
                                            <i class="fa fa-star"></i> 已订阅
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-primary" @onclick="@(e => SubAnime(animie))">
                                            <i class="fa fa-star-o"></i> 订阅
                                        </button>
                                    }

                                    <span class="card-text text-sm text-danger">@animie.DayOfWeekText</span>
                                </div>

                            </div>
                        </div>
                    </div>
                }
            </div>
        </ModalBody>

    </ModalContent>
</Modal>
<Modal @ref="frameModal">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalBody Style="padding:0 !important;">
            <iframe src="@Uri" width="1138" height="680" scrolling="auto" frameborder="0">
            </iframe>
        </ModalBody>
        <ModalFooter Class="justify-content-between">
            <div></div>
            <div class="input-group" style="width:40%;">
                <input type="text" class="form-control" placeholder="请复制粘贴关键字.." @bind-value="@keyword">
                <Button Class="btn btn-outline-primary" Clicked="@Save">
                    保存
                </Button>
            </div>
            <Button Class="btn btn-outline-secondary" Clicked="@Back">
                返回
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<AnimeEditor @ref=animeEditor></AnimeEditor>
@code {

    private Modal modalRef;

    private AnimeEditor animeEditor;

    [Inject] IMessageService MessageService { get; set; }

    protected override void OnInitialized()
    {
        ScrollControl.ScrollEvent += OnScroll;
        var db = BlazorApp.Database;

        var season = Util.GetCurrentSeason();
        SeasonAnimes = db.Queryable<SeasonAnime>()
                        .OrderBy(nameof(SeasonAnime.DayOfWeek))
                        .OrderBy(nameof(SeasonAnime.SeasonAnimeId))
                        .Where(m => m.Season == season)
                        .ToList();
    }


    protected List<SeasonAnime> SeasonAnimes { get; set; }

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    /// <summary>
    /// 订阅新番
    /// </summary>
    /// <param name="seasonAnime"></param>
    /// <returns></returns>
    private async Task SubAnime(SeasonAnime seasonAnime)
    {
        if (seasonAnime.Subscribed)
        {
            await MessageService.Warning("番剧已订阅！");
        }
        else
        {
            var db = BlazorApp.Database;
            var subedAnime = db.Queryable<Anime>().First(m => m.Name == seasonAnime.Name);
            if(null != subedAnime)
            {
                seasonAnime.Subscribed = true;
                db.Updateable(seasonAnime).ExecuteCommand();
                StateHasChanged();
                await MessageService.Warning("番剧已订阅！");
            }
            else
            {
                SeasonAnime = seasonAnime;
                Uri = SearchEngine.ComitCat + "/search.php?keyword=" + seasonAnime.Keyword.Replace(" ", "+");
                await modalRef.Hide();
                await frameModal.Show();
            }
        }
    }

    /// <summary>
    /// 取消订阅
    /// </summary>
    /// <param name="seasonAnime"></param>
    /// <returns></returns>
    private async Task UnSubAnime(SeasonAnime seasonAnime)
    {
        if (!seasonAnime.Subscribed)
        {
            await MessageService.Warning("番剧尚未订阅！");
        }
        else
        {
            var isConfirm = await MessageService.Confirm("确定要退订此番剧吗！");
            if(isConfirm)
            {
                var db = BlazorApp.Database;
                db.BeginTran();

                seasonAnime.Subscribed = false;
                db.Updateable(seasonAnime).ExecuteCommand();

                var anime = db.Queryable<Anime>().First(m => m.Name == seasonAnime.Name);
                if(null != anime)
                {
                    db.Deleteable(anime).ExecuteCommand();

                    db.Deleteable<AnimeVideo>().Where(m => m.AnimeId == anime.Id).ExecuteCommand();
                }

                db.CommitTran();
                db.RollbackTran();

                await MessageService.Success("退订成功，请手动删除下载文件！");
                OnAnimeSubChanged?.Invoke();
            }
        }
    }

    /// <summary>
    /// 获取当季番剧
    /// </summary>
    private async void GetSeasonAnimies()
    {
        var list = await AnimeLover.Busi.ComcatProvider.GetSeasonAnimies();
        foreach(var seasonAnime in list)
        {
            if(!SeasonAnimes.Any(m => m.Season == seasonAnime.Season && m.Name == seasonAnime.Name))
            {
                BlazorApp.Database.Insertable(seasonAnime).ExecuteCommandIdentityIntoEntity();
                SeasonAnimes.Add(seasonAnime);
            }
        }
        await MessageService.Success("新番更新！");
    }


    private bool HiddenToTop = true;

    private void OnScroll(int yValue)
    {
        if(yValue > 0)
        {
            HiddenToTop = false;
        }
        else
        {
            HiddenToTop = true;
        }
        StateHasChanged();
    }

    private async Task ScrollTop()
    {
        await jsRuntime.InvokeAsync<string>("scrollToTop");
    }

    private Modal frameModal;

    private string Uri { get; set; }

    private SeasonAnime SeasonAnime { get; set; }

    private string keyword;

    private async Task Save()
    {
        if (string.IsNullOrEmpty(keyword))
        {
            await MessageService.Warning("关键字不能为空！");
            return;
        }

        var db = BlazorApp.Database;
        var anime = new Anime
        {
            Name = SeasonAnime.Name,
            PhysicalPath = Path.Combine(BlazorApp.Config.Addr, SeasonAnime.Name),
            Season = Util.GetCurrentSeason(),
            Description =string.Empty,
            CoverName = string.Empty,
            DateOfWeek = SeasonAnime.DayOfWeek,
            Keyword = keyword,
            SearchEngine = Busi.SearchEngine.ComitCat,
            CreatedDate = DateTime.Now
        };

        db.Insertable(anime).ExecuteCommandIdentityIntoEntity();

        if (!System.IO.Directory.Exists(anime.PhysicalPath))
        {
            System.IO.Directory.CreateDirectory(anime.PhysicalPath);
        }

        await MessageService.Success("番剧订阅成功！");

        SeasonAnime.Subscribed = true;
        db.Updateable(SeasonAnime);
        Back();
        OnAnimeSubChanged?.Invoke();
    }

    private void Back()
    {
        frameModal.Hide();
        modalRef.Show();
    }

    public delegate void SubChanged();

    public static event SubChanged OnAnimeSubChanged;

    /// <summary>
    /// 手动创建
    /// </summary>
    /// <returns></returns>
    private async Task CreateAnimeManual()
    {
        await HideModal();
        await animeEditor.ShowModal();
        animeEditor.AnimeUpdated -= AnimeManualCreated;
        animeEditor.AnimeUpdated += AnimeManualCreated;
    }

    private void AnimeManualCreated(Anime anime)
    {
        OnAnimeSubChanged?.Invoke();
    }
}
